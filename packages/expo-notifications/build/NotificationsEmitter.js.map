{"version":3,"file":"NotificationsEmitter.js","sourceRoot":"","sources":["../src/NotificationsEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgB,kBAAkB,EAAE,MAAM,kBAAkB,CAAC;AAKlF,iCAAiC;AACjC,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,kBAAkB,CAAC,wBAAwB,CAAC,CAAC;AAC9E,MAAM,+BAA+B,GAAG,0BAA0B,CAAC;AAEnE,MAAM,UAAU,uBAAuB,CAAC,QAA8B;IACpE,OAAO,OAAO,CAAC,WAAW,CAAC,+BAA+B,EAAE,QAAQ,CAAC,CAAC;AACxE,CAAC;AAED,MAAM,UAAU,8BAA8B,CAAC,YAA0B;IACvE,OAAO,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAC3C,CAAC;AAED,MAAM,UAAU,8BAA8B;IAC5C,OAAO,CAAC,kBAAkB,CAAC,+BAA+B,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { EventEmitter, Subscription, NativeModulesProxy } from '@unimodules/core';\n\ntype Notification = any;\nexport type NotificationListener = (notification: Notification) => void;\n\n// Web uses SyntheticEventEmitter\nconst emitter = new EventEmitter(NativeModulesProxy.ExpoNotificationsEmitter);\nconst didReceiveNotificationEventName = 'onDidReceiveNotification';\n\nexport function addNotificationListener(listener: NotificationListener): Subscription {\n  return emitter.addListener(didReceiveNotificationEventName, listener);\n}\n\nexport function removeNotificationSubscription(subscription: Subscription) {\n  emitter.removeSubscription(subscription);\n}\n\nexport function removeAllNotificationListeners() {\n  emitter.removeAllListeners(didReceiveNotificationEventName);\n}\n"]}